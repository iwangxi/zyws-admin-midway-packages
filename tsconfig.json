/**
 * TypeScript编译选项配置文件
 * @typedef {Object} TsConfig
 * @property {boolean} compileOnSave - 是否在保存时编译
 * @property {Object} compilerOptions - 编译选项
 * @property {string} compilerOptions.target - 编译目标版本
 * @property {string} compilerOptions.module - 模块化规范
 * @property {string} compilerOptions.moduleResolution - 模块解析策略
 * @property {boolean} compilerOptions.experimentalDecorators - 是否启用实验性的装饰器特性
 * @property {boolean} compilerOptions.emitDecoratorMetadata - 是否在元数据中保留装饰器信息
 * @property {boolean} compilerOptions.inlineSourceMap - 是否将sourceMap嵌入到输出文件中
 * @property {boolean} compilerOptions.noImplicitThis - 是否禁止隐式的any类型
 * @property {boolean} compilerOptions.noUnusedLocals - 是否禁止未使用的局部变量
 * @property {boolean} compilerOptions.stripInternal - 是否剥离内部注释
 * @property {boolean} compilerOptions.skipLibCheck - 是否跳过库文件检查
 * @property {boolean} compilerOptions.pretty - 是否美化输出
 * @property {boolean} compilerOptions.declaration - 是否生成声明文件
 * @property {boolean} compilerOptions.noImplicitAny - 是否禁止隐式的any类型
 * @property {string[]} compilerOptions.typeRoots - 类型定义文件的搜索路径
 * @property {string} compilerOptions.outDir - 输出目录
 * @property {string[]} exclude - 排除的文件或目录
 */
{
  "compileOnSave": true,
  "compilerOptions": {
    "target": "es2018",
    "module": "commonjs",
    "moduleResolution": "node",
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "inlineSourceMap":true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "stripInternal": true,
    "skipLibCheck": true,
    "pretty": true,
    "declaration": true,
    "noImplicitAny": false,
    "typeRoots": [ "./typings", "./node_modules/@types"],
    "outDir": "dist"
  },
  "exclude": [
    "dist",
    "node_modules",
    "test"
  ]
}
